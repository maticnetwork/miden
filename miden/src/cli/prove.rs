use super::data::{InputFile, OutputFile, ProgramFile, ProofFile};
use air::ProofOptions;
use std::path::PathBuf;
use std::time::Instant;
use structopt::StructOpt;

#[derive(StructOpt, Debug)]
#[structopt(name = "Prove", about = "Prove a miden program")]
pub struct ProveCmd {
    /// Path to .masm assembly file
    #[structopt(short = "a", long = "assembly", parse(from_os_str))]
    assembly_file: PathBuf,
    /// Path to input file
    #[structopt(short = "i", long = "input", parse(from_os_str))]
    input_file: Option<PathBuf>,
    /// Number of ouptuts
    #[structopt(short = "n", long = "num-outputs", default_value = "16")]
    num_outputs: usize,
    /// Path to output file
    #[structopt(short = "o", long = "output", parse(from_os_str))]
    output_file: Option<PathBuf>,
    /// Path to proof file
    #[structopt(short = "p", long = "proof", parse(from_os_str))]
    proof_file: Option<PathBuf>,
    /// Security level for execution proofs generated by the VM
    #[structopt(short = "s", long = "security", default_value = "96bits")]
    security: String,
}

impl ProveCmd {
    pub fn get_proof_security(&self) -> ProofOptions {
        match self.security.as_str() {
            "96bits" => ProofOptions::with_96_bit_security(),
            "128bits" => ProofOptions::with_128_bit_security(),
            other => panic!("{} is not a valid security setting", other),
        }
    }

    pub fn execute(&self) -> Result<(), String> {
        println!("============================================================");
        println!("Prove program");
        println!("============================================================");

        // load program from file and compile
        let program = ProgramFile::read(&self.assembly_file)?;

        // load input data from file
        let input_data = InputFile::read(&self.input_file, &self.assembly_file)?;

        println!("Proving program ...");
        let now = Instant::now();

        // execute program and generate proof
        let (outputs, proof) = prover::prove(
            &program,
            &input_data.get_program_inputs(),
            self.num_outputs,
            &self.get_proof_security(),
        )
        .map_err(|err| format!("Failed to prove program - {:?}", err))?;

        println!("Program proved in {} ms", now.elapsed().as_millis());

        // write proof to file
        ProofFile::write(proof, &self.proof_file, &self.assembly_file)?;

        // write outputs
        OutputFile::write(outputs, &self.output_file)?;

        Ok(())
    }
}
